{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["formatDate","string","Date","toLocaleDateString","year","month","day","hour","minute","second","App","useState","latest","setLatest","results","setResults","searchCountries","setSearchCountries","useEffect","axios","all","get","then","responseArray","data","catch","err","console","log","countries","filter","item","country","toLowerCase","includes","map","index","Card","key","bg","text","className","style","margin","Img","variant","src","countryInfo","flag","Body","Title","toUpperCase","Text","href","cases","deaths","recovered","todayCases","todayDeaths","active","critical","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","Footer","updated","textAlign","CardDeck","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","width","queries","columns","query","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a7fb39e9.chunk.js","sourcesContent":["import React,{useEffect,useState} from 'react';\nimport './App.css';\nimport './indiaCases'\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from \"axios\";\nimport 'moment-timezone';\nimport Columns from \"react-columns\";\nimport Form from \"react-bootstrap/Form\";\nfunction formatDate(string){\n    var options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric'};\n    return new Date(string).toLocaleDateString([],options);\n}\nfunction App() {\n  const [latest, setLatest] = useState(\"\");\n  const[results,setResults] = useState([]);\n  const [searchCountries, setSearchCountries] = useState(\"\");\n  useEffect(() => {\naxios\n  .all([\n    axios.get(\"https://corona.lmao.ninja/v2/all\"),\n    axios.get(\"https://corona.lmao.ninja/v2/countries\")\n])\n  .then(\n    responseArray =>{\n      setLatest(responseArray[0].data);\n      setResults(responseArray[1].data);\n    })\n  .catch(err =>{\n    console.log(err);\n  });\n},[]);\n//filter country's countryInfo Begin\nconst filterCountries = results.filter(\n  item =>{\n    return searchCountries!==\"\" ? item.country.toLowerCase().includes(searchCountries.toLowerCase()) : item;\n  }\n);\n//filter country's countryInfo End\nconst countries = filterCountries.map((data, index) => {\n  if(data.country.toLowerCase() === \"india\")\n  {\n    return(\n      <Card\n      key = {index}\n      bg=\"light\"\n      text={\"dark\"}\n      className=\"text-center\"\n      style={{ margin: \"10px\" }}\n      >\n      <Card.Img variant = \"top\" src ={data.countryInfo.flag}/>\n      <Card.Body>\n        <Card.Title>{data.country.toUpperCase()}</Card.Title>\n        <Card.Text>Click <a href = \"https://aadarsh2496.github.io/covidinindia/\">here</a> to view live state wise report in India</Card.Text>\n        <Card.Text>Total Cases: {data.cases}</Card.Text>\n        <Card.Text>Deaths reported: {data.deaths}</Card.Text>\n        <Card.Text>Recovered cases: {data.recovered}</Card.Text>\n        <Card.Text>Today's Cases: {data.todayCases}</Card.Text>\n        <Card.Text>Today's Deaths: {data.todayDeaths}</Card.Text>\n        <Card.Text>Active Cases: {data.active}</Card.Text>\n        <Card.Text>Critical Cases: {data.critical}</Card.Text>\n        <Card.Text>Cases per OneMillion: {data.casesPerOneMillion}</Card.Text>\n        <Card.Text>Deaths per OneMillion: {data.deathsPerOneMillion}</Card.Text>\n        <Card.Text>Total Tests conducted: {data.tests}</Card.Text>\n        <Card.Text>Tests Per OneMillion: {data.testsPerOneMillion}</Card.Text>\n      </Card.Body>\n      <Card.Footer>\n        <small>Last updatedat : {formatDate(data.updated)}.</small>\n      </Card.Footer>\n      </Card>\n    );\n  }\n  else{\n  return(\n    <Card\n    key = {index}\n    bg=\"light\"\n    text={\"dark\"}\n    className=\"text-center\"\n    style={{ margin: \"10px\" }}\n    >\n    <Card.Img variant = \"top\" src ={data.countryInfo.flag}/>\n    <Card.Body>\n      <Card.Title>{data.country.toUpperCase()}</Card.Title>\n      <Card.Text>Total Cases: {data.cases}</Card.Text>\n      <Card.Text>Deaths reported: {data.deaths}</Card.Text>\n      <Card.Text>Recovered cases: {data.recovered}</Card.Text>\n      <Card.Text>Today's Cases: {data.todayCases}</Card.Text>\n      <Card.Text>Today's Deaths: {data.todayDeaths}</Card.Text>\n      <Card.Text>Active Cases: {data.active}</Card.Text>\n      <Card.Text>Critical Cases: {data.critical}</Card.Text>\n      <Card.Text>Cases per OneMillion: {data.casesPerOneMillion}</Card.Text>\n      <Card.Text>Deaths per OneMillion: {data.deathsPerOneMillion}</Card.Text>\n      <Card.Text>Total Tests conducted: {data.tests}</Card.Text>\n      <Card.Text>Tests Per OneMillion: {data.testsPerOneMillion}</Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small>Last updated at: {formatDate(data.updated)}.</small>\n    </Card.Footer>\n    </Card>\n  );\n}\n});\nvar queries = [{\n    columns: 2,\n    query: 'min-width: 500px'\n  }, {\n    columns: 3,\n    query: 'min-width: 1000px'\n  }];\n  //var ViewCount = count.ViewCount;\n  return (\n    <div>\n    <br/>\n    <h2 style = {{ textAlign: \"center\" }}>Covid-19 Live Stats</h2>\n    <CardDeck>\n<Card\nbg=\"secondary\"\ntext={\"white\"}\nclassName=\"text-center\"\nstyle={{ margin: \"10px\" }}\n>\n  <Card.Body>\n    <Card.Title>World Cases</Card.Title>\n    <Card.Text>\n      Total: {latest.cases}\n    </Card.Text>\n    <Card.Text>\n      Today's Cases Reported: {latest.todayCases}\n    </Card.Text>\n  </Card.Body>\n  <Card.Footer>\n    <small>Last updated at: {formatDate(latest.updated)}.</small>\n  </Card.Footer>\n</Card>\n<Card\nbg=\"danger\"\ntext={\"white\"}\nclassName=\"text-center\"\nstyle={{ margin: \"10px\" }}\n>\n  <Card.Body>\n    <Card.Title>World Deaths</Card.Title>\n    <Card.Text>\n      {latest.deaths}\n    </Card.Text>\n    <Card.Text>\n      Today's Deaths Reported: {latest.todayDeaths}\n    </Card.Text>\n  </Card.Body>\n  <Card.Footer>\n    <small>Last updated at: {formatDate(latest.updated)}.</small>\n  </Card.Footer>\n</Card>\n<Card\nbg=\"success\"\ntext={\"white\"}\nclassName=\"text-center\"\nstyle={{ margin: \"10px\" }}\n>\n  <Card.Body>\n    <Card.Title>World Recovered Cases</Card.Title>\n    <Card.Text>\n      {latest.recovered}\n    </Card.Text>\n  </Card.Body>\n  <Card.Footer>\n    <small>Last updated {formatDate(latest.updated)}.</small>\n  </Card.Footer>\n</Card>\n</CardDeck>\n<br/>\n<Form>\n  <Form.Group controlId=\"formGroupSearch\">\n    <Form.Control\n    type=\"text\"\n    placeholder=\"Filter by Country's name\"\n    onChange = {e=> setSearchCountries(e.target.value.toLowerCase())}\n    style={{ width: \"230px\" }}\n    />\n  </Form.Group>\n</Form>\n<br/>\n<Columns queries={queries}>{countries}</Columns>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}