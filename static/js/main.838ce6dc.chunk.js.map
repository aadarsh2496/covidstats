{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["formatDate","string","Date","toLocaleDateString","year","month","day","hour","minute","second","App","useState","latest","setLatest","results","setResults","searchCountries","setSearchCountries","useEffect","axios","all","get","then","responseArray","data","regional","catch","err","console","log","countries","filter","item","loc","toLowerCase","includes","map","index","Card","key","bg","text","className","style","margin","Img","variant","src","countryInfo","flag","Body","Title","toUpperCase","Text","totalConfirmed","confirmedCasesIndian","discharged","deaths","confirmedCasesForeign","textAlign","CardDeck","cases","todayCases","Footer","updated","todayDeaths","recovered","Form","Group","controlId","Control","type","placeholder","onChange","e","target","value","width","queries","columns","query","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.838ce6dc.chunk.js","sourcesContent":["import React,{useEffect,useState} from 'react';\nimport './App.css';\nimport './indiaCases'\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from \"axios\";\nimport 'moment-timezone';\nimport Columns from \"react-columns\";\nimport Form from \"react-bootstrap/Form\";\nfunction formatDate(string){\n    var options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric'};\n    return new Date(string).toLocaleDateString([],options);\n}\nfunction App() {\n  const [latest, setLatest] = useState(\"\");\n    const[results,setResults] = useState([]);\n    const [searchCountries, setSearchCountries] = useState(\"\");\n  useEffect(() => {\naxios\n  .all([\n    axios.get(\"https://corona.lmao.ninja/v2/countries/India\"),\n    axios.get(\"https://api.rootnet.in/covid19-in/stats/latest\")\n])\n  .then(\n    responseArray =>{\n      setLatest(responseArray[0].data);\n      setResults(responseArray[1].data.data.regional);\n      //console.log(responseArray[1].data.data.regional);\n    })\n  .catch(err =>{\n    console.log(err);\n  });\n},[]);\n\nconst filterCountries = results.filter(\n  item =>{\n    return searchCountries!==\"\" ? item.loc.toLowerCase().includes(searchCountries.toLowerCase()) : item;\n  }\n);\n//filter country's countryInfo Begin\nconst countries = filterCountries.map((data, index) => {\n  return(\n    <Card\n    key = {index}\n    bg=\"light\"\n    text={\"dark\"}\n    className=\"text-center\"\n    style={{ margin: \"10px\" }}\n    >\n    <Card.Img variant = \"top\" src ={latest.countryInfo.flag}/>\n    <Card.Body>\n      <Card.Title>{data.loc.toUpperCase()}</Card.Title>\n      <Card.Text>Total Cases: {data.totalConfirmed}</Card.Text>\n      <Card.Text>Confirmed Cases: {data.confirmedCasesIndian}</Card.Text>\n      <Card.Text>Recovered cases: {data.discharged}</Card.Text>\n      <Card.Text>Total Deaths: {data.deaths}</Card.Text>\n      <Card.Text>Confirmed Cases with foreign nationals: {data.confirmedCasesForeign}</Card.Text>\n    </Card.Body>\n    </Card>\n  );\n});\nvar queries = [{\n    columns: 2,\n    query: 'min-width: 500px'\n  }, {\n    columns: 3,\n    query: 'min-width: 1000px'\n  }];\n  //var ViewCount = count.ViewCount;\n  return (\n    <div>\n    <br/>\n    <h2 style = {{ textAlign: \"center\" }}>Covid-19 Live report for India</h2>\n    <CardDeck>\n<Card\nbg=\"secondary\"\ntext={\"white\"}\nclassName=\"text-center\"\nstyle={{ margin: \"10px\" }}\n>\n  <Card.Body>\n    <Card.Title>India Cases</Card.Title>\n    <Card.Text>\n      Total: {latest.cases}\n    </Card.Text>\n    <Card.Text>\n      Today's Cases Resported: {latest.todayCases}\n    </Card.Text>\n  </Card.Body>\n  <Card.Footer>\n    <small>Last updated: {formatDate(latest.updated)}.</small>\n  </Card.Footer>\n</Card>\n<Card\nbg=\"danger\"\ntext={\"white\"}\nclassName=\"text-center\"\nstyle={{ margin: \"10px\" }}\n>\n  <Card.Body>\n    <Card.Title>India Deaths</Card.Title>\n    <Card.Text>\n      Total Deaths: {latest.deaths}\n    </Card.Text>\n    <Card.Text>\n      Today's Deaths Resported: {latest.todayDeaths}\n    </Card.Text>\n  </Card.Body>\n  <Card.Footer>\n    <small>Last updated: {formatDate(latest.updated)}.</small>\n  </Card.Footer>\n</Card>\n<Card\nbg=\"success\"\ntext={\"white\"}\nclassName=\"text-center\"\nstyle={{ margin: \"10px\" }}\n>\n  <Card.Body>\n    <Card.Title>Recovered cases in India</Card.Title>\n    <Card.Text>\n      Total Recovered cases: {latest.recovered}\n    </Card.Text>\n  </Card.Body>\n  <Card.Footer>\n    <small>Last updated {formatDate(latest.updated)}.</small>\n  </Card.Footer>\n</Card>\n</CardDeck>\n<br/>\n<Form>\n  <Form.Group controlId=\"formGroupSearch\">\n    <Form.Control\n    type=\"text\"\n    placeholder=\"Filter by State's name\"\n    onChange = {e=> setSearchCountries(e.target.value.toLowerCase())}\n    style={{ width: \"230px\" }}\n    />\n  </Form.Group>\n</Form>\n<br/>\n<Columns queries={queries}>{countries}</Columns>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}